package com.oleksandrsuhomlinov.niceweather;

import android.content.Context;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;

import com.google.android.gms.common.api.GoogleApiClient;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


//import static com.oleksandrsuhomlinov.goodweather.R.id.locationEditText;
import java.lang.String;

public class MainActivity extends AppCompatActivity {
    // List of Weather objects representing the forecast
    private List<Weather> weatherList = new ArrayList<>();
    // ArrayAdapter for binding Weather objects to a ListView
    private WeatherArrayAdapter weatherArrayAdapter;
    private ListView weatherListView; // displays weather info
    /**
     * ATTENTION: This was auto-generated to implement the App Indexing API.
     * See https://g.co/AppIndexing/AndroidStudio for more information.
     */
    private GoogleApiClient client;

    public TextView LongitudeTextView;
    public TextView LatitudeTextView;

    String MyLatitude;
    String MyLongitude;
    private static final int MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION=99;




    // configure Toolbar, ListView and FAB
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        // autogenerated code to inflate layout and configure Toolbar
        setContentView(R.layout.activity_main);
        //for debugging only:
        LongitudeTextView = (TextView) findViewById(R.id.LongitudeTextView);
        LatitudeTextView = (TextView) findViewById(R.id.LatitudeTextView);


        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        //toolbar.setTitle("My Toolbar");
// looks like some errors, after bloking the next strting the application is working
        setSupportActionBar(toolbar);


        // create ArrayAdapter to bind weatherList to the weatherListView
        weatherListView = (ListView) findViewById(R.id.weatherListView);
        weatherArrayAdapter = new WeatherArrayAdapter(this, weatherList);
        weatherListView.setAdapter(weatherArrayAdapter);


         // Checking of Permission:
        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {


            LongitudeTextView.setText("Sorry, not permission");
            // No explanation needed; request the permission
            ActivityCompat.requestPermissions(this,
                    new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},
                    MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION);

            return;
        }
        //Create location manager:
        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        //Registrate Location Providers:
        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,listener);
        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0,listener);


    }


    // create openweathermap.org web service URL using coordinates
    private URL createURL(String myLat, String myLon) {
        String apiKey = getString(R.string.api_key);
        String baseUrl = getString(R.string.web_service_url);


        try {

            String urlString = "http://api.openweathermap.org/data/2.5/forecast/daily?lat=" + myLat +
                    "&lon="+myLon+ "&cnt=10&APPID=" + apiKey;

            return new URL(urlString);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null; // URL was malformed
    }

    private class GetWeatherTask
            extends AsyncTask<URL,String,JSONObject> {
        //extends AsyncTask<URL, Void, Integer> {
        @Override
        protected JSONObject doInBackground(URL... params) {
            //protected Integer doInBackground(URL... params) {
            HttpURLConnection connection = null;
            try {
                connection = (HttpURLConnection) params[0].openConnection();
                //Integer response = 9875;
                Integer response = connection.getResponseCode();
                // int response1 = response+1;

                //System.out.println(response);
                //response = HttpURLConnection.HTTP_NOT_ACCEPTABLE;
                if (response == HttpURLConnection.HTTP_OK) {
                    StringBuilder builder = new StringBuilder();

                    try (BufferedReader reader = new BufferedReader(
                            new InputStreamReader(connection.getInputStream()))) {

                        String line;

                        while ((line = reader.readLine()) != null) {
                            builder.append(line);
                        }
                    } catch (IOException e) {
                        Snackbar.make(findViewById(R.id.coordinatorLayout),
                                R.string.read_error, Snackbar.LENGTH_LONG).show();
                        e.printStackTrace();
                    }

                    return new JSONObject(builder.toString());

                } else {
                    Snackbar.make(findViewById(R.id.coordinatorLayout),
                            R.string.connect_error1,
                            //response,
                            Snackbar.LENGTH_LONG).show();
                    return null;


                }
            } catch (Exception e) {
                Snackbar.make(findViewById(R.id.coordinatorLayout),
                        R.string.connect_error, Snackbar.LENGTH_LONG).show();
                e.printStackTrace();
            } finally {
                connection.disconnect(); // close the HttpURLConnection

            }

            return null;
        }

        // process JSON response and update ListView
        @Override
        protected void onPostExecute(JSONObject weather) {

            convertJSONtoArrayList(weather); // repopulate weatherList
            weatherArrayAdapter.notifyDataSetChanged(); // rebind to ListView
            weatherListView.smoothScrollToPosition(0); // scroll to top

        }
    }

    // create Weather objects from JSONObject containing the forecast
    private void convertJSONtoArrayList(JSONObject forecast) {
        weatherList.clear(); // clear old weather data

        try {
            // get forecast's "list" JSONArray
            JSONArray list = forecast.getJSONArray("list");

            // convert each element of list to a Weather object
            //for (int i = 0; i < list.length(); ++i) {
            for (int i = 0; i < 3; ++i) {    //for test task

                JSONObject day = list.getJSONObject(i); // get one day's data

                // get the day's temperatures ("temp") JSONObject
                JSONObject temperatures = day.getJSONObject("temp");

                // get day's "weather" JSONObject for the description and icon
                JSONObject weather =
                        day.getJSONArray("weather").getJSONObject(0);

                // add new Weather object to weatherList
                weatherList.add(new Weather(
                        day.getLong("dt"), // date/time timestamp
                        temperatures.getDouble("min"), // minimum temperature
                        temperatures.getDouble("max"), // maximum temperature
                        day.getDouble("humidity"), // percent humidity
                        weather.getString("description"), // weather conditions
                        weather.getString("icon"))); // icon name
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }


    private LocationListener listener = new LocationListener() {
        @Override
        public void onLocationChanged(Location location) {

            if (location!=null) {
                MyLatitude = String.valueOf(location.getLatitude());
                MyLongitude = String.valueOf(location.getLongitude());
                LongitudeTextView.setText("Longitude=" + String.valueOf(location.getLongitude()));
                LatitudeTextView.setText("Longitude=" + String.valueOf(location.getLatitude()));
                getWeather (MyLatitude,MyLongitude);
            }
            else{
                LongitudeTextView.setText("Sorry, location");
                LatitudeTextView.setText("unavailable");
            }
        }
        @Override
        public void onStatusChanged(String provider, int status, Bundle extras) {
        }
        @Override
        public void onProviderEnabled(String provider) {
        }
        @Override
        public void onProviderDisabled(String provider) {
        }
    };


    void getWeather(String myLatitude, String myLongitude)
    {
        URL url = createURL(myLatitude, myLongitude);



        // initiate a GetWeatherTask to download
        // weather data from OpenWeatherMap.org in a separate thread
        //url=null; // for debug only
        if (url != null) {
            //dismissKeyboard(locationEditText);
            GetWeatherTask getLocalWeatherTask = new GetWeatherTask();
            getLocalWeatherTask.execute(url);
        } else {
            Snackbar.make(findViewById(R.id.coordinatorLayout),
                    R.string.invalid_url, Snackbar.LENGTH_LONG).show();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                        //not permission

                    }
                        // Checking of Permission


                        // permission was granted, yay! Do the
                    LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,listener);
                    locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0,listener);

                    // contacts-related task you need to do.

                } else {

                    // permission denied,
                    LongitudeTextView.setText("Sorry,");
                    LatitudeTextView.setText("permission denied");
                }
                return;
            }

            // other 'case' lines to check for other
            // permissions this app might request.
        }
    }

}
